use std::path::PathBuf;

trait Parser {
    fn abc(&self) -> String;
    fn def(&self) -> String;

}

struct Parser_V1_21_1 {
    world: PathBuf
}

struct Parser_V1_21_2 {
    base: Parser_V1_21_1
}

impl Parser for Parser_V1_21_1 {
    fn abc(&self) -> String {
        String::from("abc") + &self.extra()
    }

    fn def(&self) -> String {
        String::from("def")
    }
}

impl Parser_V1_21_1 {
    fn extra(&self) -> String {
        String::from("extra")
    }

    fn new(p: PathBuf) -> Self {
        Parser_V1_21_1 {
            world: p
        }
    }
}

impl Parser for Parser_V1_21_2 {
    fn abc(&self) -> String { self.base.abc() }
    fn def(&self) -> String { self.base.extra() }


}

impl Parser_V1_21_2 {
    fn new(p: PathBuf) -> Self {
        Parser_V1_21_2 {
            base: Parser_V1_21_1::new(p)
        }
    }
}

fn get_parser(ver: &str) -> Box<dyn Parser> {
    match ver {
        "1.21.1" => Box::new(Parser_V1_21_1::new(PathBuf::from("."))),
        "1.21.2" => Box::new(Parser_V1_21_2::new(PathBuf::from("."))),
        _ => panic!()
    }
}

fn main() {
    let ver = "1.21.1";
    let parser = get_parser(ver);
}

Other notes:
* For faster filtering, etc. we'll have a bunch of index(s) with pointers to stuff matching it for example entity name bank will be a hashmap of entity name as key and list of entity refs as value that match that criteria - thats just for faster access

Up next: biomes